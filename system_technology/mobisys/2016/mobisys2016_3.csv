Session details: Session III: Next Gen Mobile OS,No abstract available.
Beetle: Flexible Communication for Bluetooth Low Energy,"The next generation of computing peripherals will be low-power ubiquitous computing devices such as door locks, smart watches, and heart rate monitors. Bluetooth Low Energy is a primary protocol for connecting such peripherals to mobile and gateway devices. Current operating system support for Bluetooth Low Energy forces peripherals into vertical application silos. As a result, simple, intuitive applications such as opening a door with a smart watch or simultaneously logging and viewing heart rate data are impossible. We present Beetle, a new hardware interface that virtualizes peripherals at the application layer, allowing safe access by multiple programs without requiring the operating system to understand hardware functionality, fine-grained access control to peripheral device resources, and transparent access to peripherals connected over the network. We describe a series of novel applications that are impossible with existing abstractions but simple to implement with Beetle."
MCDNN: An Approximation-Based Execution Framework for Deep Stream Processing Under Resource Constraints,"We consider applying computer vision to video on cloud-backed mobile devices using Deep Neural Networks (DNNs). The computational demands of DNNs are high enough that, without careful resource management, such applications strain device battery, wireless data, and cloud cost budgets. We pose the corresponding resource management problem, which we call Approximate Model Scheduling, as one of serving a stream of heterogeneous (i.e., solving multiple classification problems) requests under resource constraints. We present the design and implementation of an optimizing compiler and runtime scheduler to address this problem. Going beyond traditional resource allocators, we allow each request to be served approximately, by systematically trading off DNN classification accuracy for resource use, and remotely, by reasoning about on-device/cloud execution trade-offs. To inform the resource allocator, we characterize how several common DNNs, when subjected to state-of-the art optimizations, trade off accuracy for resource use such as memory, computation, and energy. The heterogeneous streaming setting is a novel one for DNN execution, and we introduce two new and powerful DNN optimizations that exploit it. Using the challenging continuous mobile vision domain as a case study, we show that our techniques yield significant reductions in resource usage and perform effectively over a broad range of operating conditions."
TaskFolder: Dynamic and Fine-Grained Workload Consolidation for Mobile Devices,"Despite the resource-constrained environment associated with mobile devices, the Android task scheduler tries to spread the workload equally among all CPU cores. While this is a sensible use of resources in desktop or server environments, it is inefficient for mobile devices, because they usually have lower computing demand and require single-user-perceptible performance guaran-tees. As a result, spreading tasks to all cores does not improve per-formance, increases energy consumption, and can cause perfor-mance issues when multiple mobile virtual machines attempt to engage as many cores as possible. To address this problem, we propose TaskFolder, a multi-core management scheme implemented on top of the task scheduler. TaskFolder attempts to compute the minimum number of cores required to perform the current workload without sacrificing per-formance, and schedules tasks to only that minimal number of cores. This number is called the Core Concurrency and is calculated based on past task dynamics. Experimental results of a case study show that TaskFolder saves an average of 19% and up to 48% of CPU power over a set of mobile applications on the latest Intel mobile platform."
Understanding the Characteristics of Android Wear OS,"Interactive wearable devices bring dramatic changes to apps and hardware, leaving operating system (OS) design in the mist. To this end, we thoroughly examine the execution efficiency of Android Wear, a popular wearable OS. By running a suite of fifteen benchmarks, we profile four system aspects: CPU usage, idle episodes, thread-level parallelism, and microarchitectural behaviors. We present the discovered inefficiencies and their root causes, together with a series of widespread, yet unknown OS design flaws. Towards designing future wearable OSes, our study has yielded a generic lesson, key insights, and specific action items."
