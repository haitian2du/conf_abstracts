Revenue Maximization for Query Pricing.,"Buying and selling of data online has increased substantially over the last few years. Several frameworks have already been proposed that study query pricing in theory and practice. The key guiding principle in these works is the notion of arbitrage-freeness where the broker can set different prices for different queries made to the dataset, but must ensure that the pricing function does not provide the buyers with opportunities for arbitrage. However, little is known about revenue maximization aspect of query pricing. In this paper, we study the problem faced by a broker selling access to data with the goal of maximizing her revenue. We show that this problem can be formulated as a revenue maximization problem with single-minded buyers and unlimited supply, for which several approximation algorithms are known. We perform an extensive empirical evaluation of the performance of several pricing algorithms for the query pricing problem on real-world instances. In addition to previously known approximation algorithms, we propose several new heuristics and analyze them both theoretically and experimentally. Our experiments show that algorithms with the best theoretical bounds are not necessarily the best empirically. We identify algorithms and heuristics that are both fast and also provide consistently good performance when valuations are drawn from a wide variety of distributions."
Realtime Top-k Personalized PageRank over Large Graphs on GPUs.,"Given a graph G, a source node s âˆˆ G and a positive integer k, a top-k Personalized PageRank (PPR) query returns the k nodes with the highest PPR values with respect to s, where the PPR of a node v measures its relevance from the perspective of source s. Top-k PPR processing is a fundamental task in many important applications such as web search, social networks, and graph analytics. This paper aims to answer such a query in realtime, i.e., within less than 100ms, on an Internet-scale graph with billions of edges. This is far beyond the current state of the art, due to the immense computational cost of processing a PPR query. We achieve this goal with a novel algorithm kPAR, which utilizes the massive parallel processing power of GPUs.The main challenge in designing a GPU-based PPR algorithm lies in that a GPU is mainly a parallel computation device, whereas PPR processing involves graph traversals and value propagation operations, which are inherently sequential and memory-bound. Existing scalable PPR algorithms are mostly described as single-thread CPU solutions that are resistant to parallelization. Further, they usually involve complex data structures which do not have efficient adaptations on GPUs. kPAR overcomes these problems via both novel algorithmic designs (namely, adaptive forward push and inverted random walks) and system engineering (e.g., load balancing) to realize the potential of GPUs. Meanwhile, kPAR provides rigorous guarantees on both result quality and worst-case efficiency. Extensive experiments show that kPAR is usually 10x faster than parallel adaptations of existing methods. Notably, on a billion-edge Twitter graph, kPAR answers a top-1000 PPR query in 42.4 milliseconds."
Fast Large-Scale Trajectory Clustering.,"In this paper, we study the problem of large-scale trajectory data clustering, k-paths, which aims to efficiently identify k ""representative"" paths in a road network. Unlike traditional clustering approaches that require multiple data-dependent hyperparameters, k-paths can be used for visual exploration in applications such as traffic monitoring, public transit planning, and site selection. By combining map matching with an efficient intermediate representation of trajectories and a novel edge-based distance (EBD) measure, we present a scalable clustering method to solve k-paths. Experiments verify that we can cluster millions of taxi trajectories in less than one minute, achieving improvements of up to two orders of magnitude over state-of-the-art solutions that solve similar trajectory clustering problems."
Automating Distributed Tiered Storage Management in Cluster Computing.,"Data-intensive platforms such as Hadoop and Spark are routinely used to process massive amounts of data residing on distributed file systems like HDFS. Increasing memory sizes and new hardware technologies (e.g., NVRAM, SSDs) have recently led to the introduction of storage tiering in such settings. However, users are now burdened with the additional complexity of managing the multiple storage tiers and the data residing on them while trying to optimize their workloads. In this paper, we develop a general framework for automatically moving data across the available storage tiers in distributed file systems. Moreover, we employ machine learning for tracking and predicting file access patterns, which we use to decide when and which data to move up or down the storage tiers for increasing system performance. Our approach uses incremental learning to dynamically refine the models with new file accesses, allowing them to naturally adjust and adapt to workload changes over time. Our extensive evaluation using realistic workloads derived from Facebook and CMU traces compares our approach with several other policies and showcases significant benefits in terms of both workload performance and cluster efficiency."
APOLLO: Automatic Detection and Diagnosis of Performance Regressions in Database Systems.,"The practical art of constructing database management systems (DBMSs) involves a morass of trade-offs among query execution speed, query optimization speed, standards compliance, feature parity, modularity, portability, and other goals. It is no surprise that DBMSs, like all complex software systems, contain bugs that can adversely affect their performance. The performance of DBMSs is an important metric as it determines how quickly an application can take in new information and use it to make new decisions.Both developers and users face challenges while dealing with performance regression bugs. First, developers usually find it challenging to manually design test cases to uncover performance regressions since DBMS components tend to have complex interactions. Second, users encountering performance regressions are often unable to report them, as the regression-triggering queries could be complex and database-dependent. Third, developers have to expend a lot of effort on localizing the root cause of the reported bugs, due to the system complexity and software development complexity.Given these challenges, this paper presents the design of Apollo, a toolchain for automatically detecting, reporting, and diagnosing performance regressions in DBMSs. We demonstrate that Apollo automates the generation of regression-triggering queries, simplifies the bug reporting process for users, and enables developers to quickly pinpoint the root cause of performance regressions. By automating the detection and diagnosis of performance regressions, Apollo reduces the labor cost of developing efficient DBMSs."
Lowering the Latency of Data Processing Pipelines Through FPGA based Hardware Acceleration.,"Web search engines often involve a complex pipeline of processing stages including computing, scoring, and ranking potential answers plus returning the sorted results. The latency of such pipelines can be improved by minimizing data movement, making stages faster, and merging stages. The throughput is determined by the stage with the smallest capacity and it can be improved by allocating enough parallel resources to each stage. In this paper we explore the possibility of employing hardware acceleration (an FPGA) as a way to improve the overall performance when computing answers to search queries. With a real use case as a baseline and motivation, we focus on accelerating the scoring function implemented as a decision tree ensemble, a common approach to scoring and classification in search systems. Our solution uses a novel decision tree ensemble implementation on an FPGA to: 1) increase the number of entries that can be scored per unit of time, and 2) provide a compact implementation that can be combined with previous stages. The resulting system, tested in Amazon F1 instances, significantly improves the quality of the search results and improves performance by two orders of magnitude over the existing CPU based solution."
Model Slicing for Supporting Complex Analytics with Elastic Inference Cost and Resource Constraints.,Model Slicing for Supporting Complex Analytics with Elastic Inference Cost and Resource Constraints.
Cross-chain Deals and Adversarial Commerce.,Cross-chain Deals and Adversarial Commerce.
Efficient Main-Memory Top-K Selection For Multicore Architectures.,Efficient Main-Memory Top-K Selection For Multicore Architectures.
Scalable Garbage Collection for In-Memory MVCC Systems.,Scalable Garbage Collection for In-Memory MVCC Systems.
Fully Dynamic Depth-First Search in Directed Graphs.,Fully Dynamic Depth-First Search in Directed Graphs.
LINC: A Motif Counting Algorithm for Uncertain Graphs.,LINC: A Motif Counting Algorithm for Uncertain Graphs.
ObliDB: Oblivious Query Processing for Secure Databases.,ObliDB: Oblivious Query Processing for Secure Databases.
Secure Multi-Party Functional Dependency Discovery.,Secure Multi-Party Functional Dependency Discovery.
Vacuum Filters: More Space-Efficient and Faster Replacement for Bloom and Cuckoo Filters.,Vacuum Filters: More Space-Efficient and Faster Replacement for Bloom and Cuckoo Filters.
On Supporting Efficient Snapshot Isolation for Hybrid Workloads with Multi-Versioned Indexes.,On Supporting Efficient Snapshot Isolation for Hybrid Workloads with Multi-Versioned Indexes.
Interleaved Multi-Vectorizing.,Interleaved Multi-Vectorizing.
"A Unified Optimization Algorithm For Solving ""Regret-Minimizing Representative"" Problems.","A Unified Optimization Algorithm For Solving ""Regret-Minimizing Representative"" Problems."
Pushing Data-Induced Predicates Through Joins in Big-Data Clusters.,Pushing Data-Induced Predicates Through Joins in Big-Data Clusters.
Discovery of Approximate (and Exact) Denial Constraints.,Discovery of Approximate (and Exact) Denial Constraints.
Deep Unsupervised Cardinality Estimation.,Deep Unsupervised Cardinality Estimation.
Free Gap Information from the Differentially Private Sparse Vector and Noisy Max Mechanisms.,Free Gap Information from the Differentially Private Sparse Vector and Noisy Max Mechanisms.
An End-to-End Learning-based Cost Estimator.,An End-to-End Learning-based Cost Estimator.
Last-Mile Delivery Made Practical: An Efficient Route Planning Framework with Theoretical Guarantees.,Last-Mile Delivery Made Practical: An Efficient Route Planning Framework with Theoretical Guarantees.
Database Processing-in-Memory: An Experimental Study.,Database Processing-in-Memory: An Experimental Study.
Incorporating Super-Operators in Big-Data Query Optimizers.,Incorporating Super-Operators in Big-Data Query Optimizers.
Efficient Progressive Minimum k-core Search.,Efficient Progressive Minimum k-core Search.
Harmonia: Near-Linear Scalability for Replicated Storage with In-Network Conflict Detection.,Harmonia: Near-Linear Scalability for Replicated Storage with In-Network Conflict Detection.
Learning to Sample: Counting with Complex Queries.,Learning to Sample: Counting with Complex Queries.
Return of the Lernaean Hydra: Experimental Evaluation of Data Series Approximate Similarity Search.,Return of the Lernaean Hydra: Experimental Evaluation of Data Series Approximate Similarity Search.
